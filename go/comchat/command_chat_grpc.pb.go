// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: command_chat.proto

package comchat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandChatClient is the client API for CommandChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandChatClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (CommandChat_ChatClient, error)
}

type commandChatClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandChatClient(cc grpc.ClientConnInterface) CommandChatClient {
	return &commandChatClient{cc}
}

func (c *commandChatClient) Chat(ctx context.Context, opts ...grpc.CallOption) (CommandChat_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandChat_ServiceDesc.Streams[0], "/comchat.CommandChat/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandChatChatClient{stream}
	return x, nil
}

type CommandChat_ChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type commandChatChatClient struct {
	grpc.ClientStream
}

func (x *commandChatChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commandChatChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandChatServer is the server API for CommandChat service.
// All implementations must embed UnimplementedCommandChatServer
// for forward compatibility
type CommandChatServer interface {
	Chat(CommandChat_ChatServer) error
	mustEmbedUnimplementedCommandChatServer()
}

// UnimplementedCommandChatServer must be embedded to have forward compatible implementations.
type UnimplementedCommandChatServer struct {
}

func (UnimplementedCommandChatServer) Chat(CommandChat_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedCommandChatServer) mustEmbedUnimplementedCommandChatServer() {}

// UnsafeCommandChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandChatServer will
// result in compilation errors.
type UnsafeCommandChatServer interface {
	mustEmbedUnimplementedCommandChatServer()
}

func RegisterCommandChatServer(s grpc.ServiceRegistrar, srv CommandChatServer) {
	s.RegisterService(&CommandChat_ServiceDesc, srv)
}

func _CommandChat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandChatServer).Chat(&commandChatChatServer{stream})
}

type CommandChat_ChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type commandChatChatServer struct {
	grpc.ServerStream
}

func (x *commandChatChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commandChatChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandChat_ServiceDesc is the grpc.ServiceDesc for CommandChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comchat.CommandChat",
	HandlerType: (*CommandChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _CommandChat_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "command_chat.proto",
}
